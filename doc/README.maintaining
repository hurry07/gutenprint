BUILD SCRIPTS: how they work and how to modify them
===================================================


Introduction
------------

GIMP-Print uses GNU autoconf and automake to generate the scripts that build
the software.  It also uses libtool to create shared libraries.  This file
describes how they work together.  It also discusses the thinking behind how
they are used in GIMP-Print, and how to modify the GIMP-Print build scripts
without breaking other things.  If you have used autoconf and automake before,
there will be little that is new in this file, but you should note the
conventions used in GIMP-Print.

This file is split into the following sections:

o Integration of the autotools
o Normal use of the tools
o configure.in.in
o Makefile.am
o aclocal
o config.h
o automake subtleties
o libtool tricks
o Testing changes to the build scripts
o Further information

I hope you find this useful. If any part was not clear, or there was something
that you would like covering, please let me know!

Roger Leigh <roger@whinlatter.uklinux.net> -- Mon, 19 Feb 2001 15:32:10 +0000


1. Integration of the autotools
-------------------------------

Each directory has a Makefile.am file which is processed by automake to produce
a Makefile.in.  In the root directory there is a configure.in.in which is
processed by autogen.sh to produce configure.in.  configure.in is processed by
autoconf to make a script called configure.  When run, configure does various
tests and checks, and then reads each Makefile.in to make a Makefile, and also
generates a header called config.h from config.h.in.  config.h.in is produced
with autoheader from configure.in and acconfig.h.  autoconf also requires a
file aclocal.m4 which is generated by aclocal.

All these files are generated simply by running `./autogen.sh' in the top
directory.  If you are using a distributed version of GIMP-Print, as opposed to
CVS, then they will already be present and the following will not be necessary.

This is probably best demonstrated graphically.  The relationships between the
files are as follows:

During package setup (from CVS):

	                           autogen.sh
	          configure.in.in ------------> configure.in
	
	gettext files added
	libtool files added
	                           aclocal
	             configure.in ------------> aclocal.m4
	
	                           autoheader
	acconfig.h + configure.in ------------> config.h.in
	
	                           automake
	              Makefile.am ------------> Makefile.in
	
	                           autoconf
	             configure.in ------------> configure
	
Configure:
	                           configure
	              Makefile.in ------------> Makefile.am
	              config.h.in ------------> config.h
	             headers.h.in ------------> headers.h
	             manpage.n.in ------------> manpage.n


2. Normal use of the tools
--------------------------

If building from CVS, normally one runs 'autogen.sh' to generate all of the
scripts.  Then the package can be built by running 'configure' and then 'make'.
The built package can then be installed with 'make install'

If the build scripts have been modified, it will not normally be necessary to
re-run autogen.sh: the Makefiles will notice and regenerate themselves, running
configure again if needed.  If configure.in.in has been modified, you will need
to re-run autogen.sh to regenerate configure.in.


3. configure.in.in
------------------

This file is a Bourne shell script with m4 macros embedded in it.  It is parsed
with sed to produce configure.in, which has hard-coded release dates in it.
autoconf expands the m4 macros to produce configure.

The file is split into mostly discrete sections:
i.    Versioning details (including library versioning)
ii.   autoconf and automake initialisation
iii.  libtool setup
iv.   Default settings
v.    configure --with and --enable options
vi.   Checks for programs
vii.  Compiler flags
viii. Checks for libraries
ix.   Checks for headers
x.    Checks for typedefs, structures, and compiler characteristics
xi.   Define what has to be built (conditional compilation of things)
xii.  CUPS path settings
xiii. Definitions and substitutions
xiv.  Parse and output files

There is sometimes some overlap between sections, but any additions should go
into the appropriate section, if at all possible.  A new section may be created
if there is no suitable section.


4. Makefile.am
--------------

There is a Makefile.am in each directory, apart from a few where the Makefile
the next level up handles things.  Each Makefile.am is split into several
sections:
i.    Macros common to every Makefile.am
ii.   Path macros
iii.  Compiler macros
iv.   Build dependencies.  This is further split into a) binaries and b) data.
      Each of these sections has
      1. list of objects to build (if applicable)
      2. EXTRA_ objects (if applicable)
      3. Dependencies for each object
v.    Rules
vi.   Cleaning macros
vii.  EXTRA_DIST

Keeping everything in this logical order keeps them neat and readable.  Not
every Makefile.am will have all these sections, but those that are present
should be ordered in this way.


5. aclocal
----------

aclocal contains all the macros that are needed by autoconf to generate
configure from configure.in.  It is created by running 'aclocal'. If any of the
macros are not present on your system, you can point out where the macros
distributed with GIMP-Print are by using '-I macrodir' with aclocal.  E.g. if
AM_PATH_GIMPPRINT is missing, you can make it use src/main/gimpprint.m4 with
'aclocal -I src/main'.


6. config.h
-----------

config.h is created by configure and included by all of the C source files in
the distribution.  It is created from config.h.in by 'configure'.  config.h.in
is created from configure.in and acconfig.h by 'autoheader'.  If you add any
AC_DEFINE, or AC_DEFINE_UNQUOTED macros to configure.in.in, you may be required
to add entries to acconfig.h.  If you defined 'HAVE_FOO_H' you would add
something like:
	/* Define if foo.h is present */
	#undef HAVE_FOO_H
to acconfig.h


7. automake subtleties
----------------------

Automake parses Makefile.am to produce Makefile.in.  Makefile.am looks much like
a normal Makefile, e.g. you can write your own rules in it.  However, it is not
entirely like a normal Makefile.  In particular, automake conditionals are not
the same as make conditionals in that they only work for single lines, not
whole blocks of lines.  Therefore if you want to make a rule conditional, just
surround the 'target: dependencies' line:
	if BUILD_CUPS
	install-data-local: ppd
	endif
		$(mkinstalldirs) $(DESTDIR)$(cups_modeldir)
		cd ppd ; \
		for ppdfile in * ; do \
		  $(INSTALL_DATA) $$ppdfile $(DESTDIR)$(cups_modeldir) ; \
		done
Another gotcha is that automake adds rules of its own, so you must make sure that
the names do not clash, or you may get obscure problems occurring.


8. libtool tricks
-----------------

libtool is used to create shared libraries.  One gotcha with libtool is that if
a program is linked with a libtool shared library in the build tree, then it is
actually created in '.libs/program', and not 'program'.  However, if it is
statically linked (e.g. the platform does not support shared libraries, or you
used --disable-shared with configure, perhaps to make the build faster), then
it will be created as 'program'.  This is so that you can run the program
before you install it.  If it is linked with shared libraries, a wrapper script
does some magic with LD_LIBRARY_PATH.  However, this means that your install
rules must take this into account by checking that '.libs/program exists', and
installing it if it is present, but otherwise installing 'program'.  Automake
install rules do this automatically, but it you write your own, you must take
this into consideration.


9. Testing changes to the build scripts
---------------------------------------

If you make a change to one of the scripts, simply running autogen.sh and
seeing if 'make' and 'make install' work is not enough.  In particular, you
must check that it does not break 'VPATH' builds where the source and build
directories are not the same.
To do this:
    mkdir /var/tmp/tmp-build
    cd /var/tmp/tmp-build
    ~roger/gimp-print/current/configure --with-cups
    make
    make DESTDIR=/var/tmp/tmp-inst install
You should also test that 'make install' works with and without DESTDIR set.
Note that the current stable gettext release does not support DESTDIR, but the
CVS version does.  The current gettext also breaks in VPATH due to
MKINSTALLDIRS being wrongly defined. This is also fixed in CVS.


10. Further information
-----------------------

autoconf: autoconf.info
automake: automake.info
libtool:  libtool.info
gettext:  gettext.info (but it's not very comprehensive)
